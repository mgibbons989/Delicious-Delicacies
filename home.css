body,html{
    margin: 0;
    height: 100%;
    background-color: beige;
}

header{
    background-color: rgb(96, 104, 146);
    display: flex;
    margin-bottom: 20px;
    height: 100px;
}
/* Top of Page */
.logo img{ 
    position: absolute;
    height: 100px;
}

.welcome{
    margin:auto; /*center*/
    font-size: 2em;
    text-decoration: underline;
    color:white
}

/* Layout */
.overall{
    margin: auto;
    width: 70%;
    background-color: rgb(167, 167, 146);

    display: flex;
    flex-direction: column;
    flex-grow:1;

    /* border: 2px solid red; */
}

.main{
    width: 100%;
    display: flex;
    justify-content: space-between;
    /* border: 2px solid black; */
}

.left, .mid, .right{
    /* flex-basis: 33%; */
    padding-top: 2%;
    padding-bottom: 2%;
    display: flex;
    flex-direction: column;
    flex-grow: 1;

    /* border: 2px solid pink; */
}


/* Custom Checkboxes DETAILS IN TERI.CSS*/


 .filter{
    display: block;
    position: relative;
    padding-top:4px;
    padding-left: 30px;
    margin-left: 10px;
    margin-bottom: 10px;
    margin-top: 10px;
    cursor: pointer;
    font-size: 130%;
}

.filter input {
    position: absolute;
    opacity: 0;
    cursor: pointer;
}

.checkmark {
    position: absolute;
    top: 5px;
    left: 5px;
    height: 20px;
    width: 20px;
    background-color: #eee;
}

.filter input:checked ~ .checkmark {
    background-color: #2196F3;
}

.checkmark:after {
    content: "";
    position: absolute;
    display: none;
}

.filter input:checked ~ .checkmark:after {
    display: block;
}

.filter .checkmark:after {
    left: 7px;
    top: 2px;
    width: 5px;
    height: 10px;
    border: solid white;
    border-width: 0 3px 3px 0;
    transform: rotate(45deg);
}

.checks{
   display: flex;
   margin: auto;
}

/* Filter Behavior */
.recipe{
    visibility: visible;
    opacity: 1;
    transition: 0.35s ease-out;
}

/* The :has class checks if the inner has the relevant information
I used it to check if the checkboxes with the id had been checked and then used 
the sibling combinator to affect the recipe cards in the main div */

.checks:has(#dessert:checked) ~ .main .recipe:not(.dessert){
    visibility: hidden;
    opacity: 0;
    transition: 0.35s ease-out;  /* Makes the div disappear smoothly */
}
.checks:has(#no-dairy:checked) ~ .main .recipe:not(.no-dairy){
    visibility: hidden;
    opacity: 0;
    transition: 0.35s ease-out;
}

/* Cards and Pictures 
Cards from w3schools*/

.pic{
    height: 375px;
    display: block;
    margin-left: auto;
    margin-right:auto;
    padding: 2px;
    border: 3px solid rgb(96, 104, 146);
}

.recipe{
    padding: 2%;
    background-color: transparent;/*nothing there in the middle of flipping*/
    height: 375px;
    font-size: 150%;
} 

.recipe:hover .inner{
    transform: rotateY(180deg);
}

.tiny{
    height: 70px;
    float: left;
    padding: 5px;
}

.name{
   font-weight: bold;
}

.inner{
    position: relative;
    transition: transform 0.8s;
    transform-style: preserve-3d; /*necessary to have two sides*/
    /*To my understanding, transform style makes it so that the two sides of the 
    card can exist on one page, instead of just the front*/
}

.frontcard, .backcard{
    position: fixed;
    backface-visibility: hidden;
    /*So we can have two sides*/
}

.backcard{
    border: 3px solid rgb(96, 104, 146);
    transform: rotateY(180deg); /*Flip effect when no longer hovered over*/
    width: 379px;
    height: 100%;
    margin:auto;
    right: 1px;

    background-color: rgb(222, 228, 235);
}

.inner, .frontcard{
    width: 379px;
    height: 100%;
    margin:auto;
}

.backcard p{
    padding: 5px;
    text-align: center;
}

.backcard a{
    /*Changes the link to cover the enter card*/
    width: 379px;
    height: 100%;
    margin: auto;
    position:absolute;
}

